from aiogram import types
from utils.mydb import *


main_menu_btn = [
    'üõí –ö–∞—Ç–∞–ª–æ–≥',
    'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
    '/adm'
]

admin_sending_btn = [
    '‚úÖ –ù–∞—á–∞—Ç—å', # 0
    'üîß –û—Ç–ª–æ–∂–∏—Ç—å', # 1
    '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' # 2
]

to_close = types.InlineKeyboardMarkup(row_width=3)
to_close.add(
    types.InlineKeyboardButton(text='‚ùå', callback_data='to_close')
)


def pact():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text='–°–æ–≥–ª–∞—Å–µ–Ω ‚úÖ', callback_data='pact_accept'),
    )

    return markup


def admin_sending_info(all_msg, good, bad):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text='‚ö™Ô∏è–í—Å–µ–≥–æ: %s' % all_msg, callback_data='sending'),
        types.InlineKeyboardButton(text='‚úÖGOOD: %s' % good, callback_data='sending'),
        types.InlineKeyboardButton(text='‚ùåBAD: %s' % bad, callback_data='sending'),
    )

    return markup


def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(main_menu_btn[0], main_menu_btn[1])

    conn, cursor = connect()

    cursor.execute(f'SELECT * FROM buttons')
    base = cursor.fetchall()

    x1 = 0
    x2 = 1
    try:
        for i in range(len(base)):
            markup.add(
                base[x1][0],
                base[x2][0],
            )

            x1 += 2
            x2 += 2
    except Exception as e:
        try:
            markup.add(
                base[x1][0],
            )
        except:
            return markup

    return markup


def dep_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å | QIWI ', callback_data='qiwi'),
    )

    return markup


def payment_menu(url):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text='üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üëà', url=url),
    )

    return markup


def admin_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ', callback_data='admin_info_server'),
        types.InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='admin_info'),
        types.InlineKeyboardButton(text='üîß –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='give_balance'),
        types.InlineKeyboardButton(text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏/—Ç–æ–≤–∞—Ä–∞–º–∏', callback_data='admin_main_settings'),
        #types.InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data='admin_settings'),
        types.InlineKeyboardButton(text='‚öôÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data='email_sending'),
        types.InlineKeyboardButton(text='‚öôÔ∏è –ö–Ω–æ–ø–∫–∏', callback_data='admin_buttons'),
        types.InlineKeyboardButton(text='‚öôÔ∏è C–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω', callback_data='create_cupons'),
        )

    return markup


def admin_main_settings():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text='‚öôÔ∏è –ö–∞—Ç–∞–ª–æ–≥–∏', callback_data='admin_catalogs'),
        types.InlineKeyboardButton(text='‚öôÔ∏è –ü–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏', callback_data='admin_subdirectories'),
        types.InlineKeyboardButton(text='‚öôÔ∏è –¢–æ–≤–∞—Ä', callback_data='admin_products'),
        types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='back_to_admin_menu'),
        )

    return markup


def admin_subdirectories():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text='üîß –î–æ–±–∞–≤–∏—Ç—å', callback_data='admin_subdirectory_add'),
        types.InlineKeyboardButton(text='üîß –£–¥–∞–ª–∏—Ç—å', callback_data='admin_subdirectory_del'),
        types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='admin_main_settings'),
    )

    return markup


def admin_catalogs():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text='üîß –î–æ–±–∞–≤–∏—Ç—å', callback_data='admin_catalog_add'),
        types.InlineKeyboardButton(text='üîß –£–¥–∞–ª–∏—Ç—å', callback_data='admin_catalog_del'),
        types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='admin_main_settings'),
        )

    return markup


def admin_products(admin_flag=True):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text='üîß –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='admin_product_upload'),
        types.InlineKeyboardButton(text='üîß –î–æ–±–∞–≤–∏—Ç—å', callback_data='admin_product_add'),
        types.InlineKeyboardButton(text='üîß –£–¥–∞–ª–∏—Ç—å', callback_data='admin_product_del'),
        )
    if admin_flag:
        markup.add(types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='admin_main_settings'))

    return markup


def email_sending():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add( 
        types.InlineKeyboardButton(text='‚úîÔ∏è –†–∞—Å—Å—ã–ª–∫–∞(—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)', callback_data='email_sending_text'), 
        types.InlineKeyboardButton(text='‚úîÔ∏è –†–∞—Å—Å—ã–ª–∫–∞(—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ)', callback_data='email_sending_photo'),
        types.InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–µ–ª–µ–Ω–∏—è—Ö', callback_data='email_sending_info')
    )

    return markup


def admin_sending():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        admin_sending_btn[0],
        admin_sending_btn[1],
        admin_sending_btn[2],
    )

    return markup


def admin_buttons():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text='üîß –î–æ–±–∞–≤–∏—Ç—å', callback_data='admin_buttons_add'),
        types.InlineKeyboardButton(text='üîß –£–¥–∞–ª–∏—Ç—å', callback_data='admin_buttons_del'),
        types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='back_to_admin_menu')
    )

    return markup


def buy(product, catalog):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data=f'buy_{product}'),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'catalog:{catalog}'),
    )

    return markup


def download(product_code):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å', callback_data=f'download_{product_code}'),
    )

    return markup


def profile():
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='deposit_profile'),
         types.InlineKeyboardButton(text='ü§ë –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤', callback_data='withdraw')],
        [types.InlineKeyboardButton(text='ü§ù –ù–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É', callback_data='search_seller')],
        [types.InlineKeyboardButton(text='üõç –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏', callback_data='profile_my_purchase'),
         types.InlineKeyboardButton(text='üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–µ—Ç—å', callback_data='ref')],
        [types.InlineKeyboardButton(text='üéÅ –•–∞–ª—è–≤–∞', callback_data='activate_promocode')],
    ])

    return markup


def trust_user(user_id, product_id, catalog_id):
    return types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'agree:{user_id}'),
        types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline:{user_id}:{product_id}:{catalog_id}')
    ]])


def manage_seller(user_id, product_id, catalog_id):
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f'del_product:{product_id}:{catalog_id}')],
        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data=f'del_seller:{user_id}')]
    ])


def cancel_button(back=False):
    return types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text=f"<< {'–û—Ç–º–µ–Ω–∞' if not back else '–ù–∞–∑–∞–¥'}", callback_data='admin_products')
    ]])


def choose_role():
    return types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="–Ø –ø—Ä–æ–¥–∞–≤–µ—Ü", callback_data='search_seller_'),
        types.InlineKeyboardButton(text="–Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å", callback_data='search_seller_0')
    ]])


def prepare_dealing(dealing_id, init=True, is_clarify=False):
    if init:
        return types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f'dealing_cancel_{dealing_id}')
        ]])
    else:
        markup = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"dealing_accept_{dealing_id}"),
            types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'dealing_cancel_{dealing_id}')
        ]])
        if not is_clarify:
            markup.add(types.InlineKeyboardButton(text="–£—Ç–æ—á–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data=f'dealing_clarify_{dealing_id}'))
        return markup


def open_dealing(dealing_id, is_seller=True):
    if not is_seller:
        return types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'dealing_message_{dealing_id}')
        ]])
    else:
        return types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'dealing_message_{dealing_id}'),
            types.InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", callback_data=f'dealing_confirmcond_{dealing_id}')
        ]])


def confirm_dealing(dealing_id):
    return types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="–î–∞, —Å–æ–≥–ª–∞—à—É—Å—å", callback_data=f'dealing_success_{dealing_id}'),
        types.InlineKeyboardButton(text="–ù–µ—Ç, –ø–æ—Å–ø–æ—Ä—é", callback_data=f'dealing_suspend_{dealing_id}')
    ]])


def cancel_clarify_button(dealing_id):
    return types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data=f'dealing_{dealing_id}')
    ]])


def dealing_update_button(dealing_id):
    return types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'dealing_update_{dealing_id}')
    ]])


def dealing_link_button(dealing_id):
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data=f'dealing_link_{dealing_id}')],
        [types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f'dealing_success_{dealing_id}')]
    ])


def withdraw(cancel=False):
    return types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="–ö–∏–≤–∏", callback_data='withdraw_qiwi'),
    ]]) if not cancel else types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data='withdraw')
    ]])
