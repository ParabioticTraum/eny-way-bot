import io
import os

import logging
import types

import requests
from aiogram.utils.exceptions import Throttled

import config
import functions as func
import menu
import texts
import random
import time
import asyncio
import re
import threading
from datetime import datetime

from SystemInfo import SystemInfo
from dealing import Dealing

from states import *
from utils.user import *
from utils.catalog import *
from utils.product import *
from utils.mydb import *

import aiogram.utils.markdown as md

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from ast import literal_eval as leval

from AntiSpam import test, antibot

import traceback

# Configure logging

logging.basicConfig(
    # filename='logs.log',
    level=logging.INFO,
    format='%(asctime)s : %(filename)s line - %(lineno)d : %(funcName)s : %(name)s : %(levelname)s : %(message)s',
    datefmt='%m/%d/%Y %I:%M:%S %p')

bot = Bot(token=config.config('bot_token'), parse_mode='html')

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

cap4ed_list = {}


@dp.message_handler(commands="cancel", state="*")
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.message_handler(commands=['start', 'help'], state='*')
async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()
    if not await test(message, bot):
        return
    try:
        await dp.throttle('start', rate=2)
    except Throttled:
        return
    check = func.first_join(message.chat.id, message.chat.first_name, message.chat.username, message.text)
    if check[0] == True:
        try:
            await bot.send_message(
                chat_id=config.config('channel_id_main_logs'),
                text=f"""
–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
            
first_name : {message.chat.first_name}
username : {message.chat.username}
user_id : {message.chat.id}

–ü—Ä–∏–≥–ª–∞—Å–∏–ª : {message.text}
    """
            )
        except:
            pass
        resp = requests.get("http://api.fl1yd.su/captcha")
        cap4ed_list[message.from_user.id] = (message.date.timestamp(), resp.headers.get("answer"))
        cap4a = io.BytesIO(resp.content)
        return await message.answer_photo(cap4a, caption='–í–≤–µ–¥–∏ –∫–∞–ø—á—É - –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–π–¥–µ—Ä–æ–≤. –£ —Ç–µ–±—è –º–∏–Ω—É—Ç–∞. –ù–µ —Å–ø—Ä–∞–≤–∏—à—å—Å—è -   '
                                                         '–≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç üíç')

    if message.from_user.id in cap4ed_list:
        if cap4ed_list[message.from_user.id][0] + 60 < message.date.timestamp():
            func.del_user(message.from_user.id)
            del cap4ed_list[message.from_user.id]
            return await antibot(message, bot)
        return await message.answer("–ö–∞–ø—á—É, —Å—ç—Ä..")

    if User(message.from_user.id).pact == 'no':
        await func.pact(message.chat.id, message.message_id)
    else:
        await message.answer_video("https://i.gifer.com/5IUl.gif",
                                     reply_markup=menu.main_menu())


@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if str(message.chat.id) in str(config.config('admin_id_own')) \
            or str(message.chat.id) in [message.chat.id]:
        await message.answer('–ü–∞–Ω–µ–ª—å –í—Å–µ–≤–ª–∞—Å—Ç–∏—è', reply_markup=menu.admin_menu())


@dp.message_handler()
async def send_message(message: types.Message, state: FSMContext):
    status = await test(message, bot)
    if status is False:
        return

    user_id = message.from_user.id
    if user_id in cap4ed_list:
        if cap4ed_list[user_id][0] + 60 < message.date.timestamp():
            func.del_user(user_id)
            del cap4ed_list[user_id]
            return await antibot(message, bot)
        if message.text.lower() != cap4ed_list[user_id][1]:
            return await message.answer(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞\n\n–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å  "
                                        f"{int(cap4ed_list[user_id][0] + 60 - message.date.timestamp())} "
                                        f"—Å–µ–∫—É–Ω–¥")
        else:
            del cap4ed_list[user_id]
            await message.answer("–ö–∞–ø—á—É –ø—Ä–æ—à–µ–ª - IQ –∏–∑ 3 —Ü–∏—Ñ—Ä, –∑–Ω–∞—á–∏—Ç –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å")

    try:
        user = User(message.from_user.id)
    except:
        return await send_welcome(message, state)
    if user.pact == 'no':
        await func.pact(message.chat.id, message.message_id)
    else:
        chat_id = message.chat.id
        first_name = message.from_user.first_name
        username = message.from_user.username

        if message.text in func.btn_menu_list():
            await bot.send_message(chat_id=chat_id, text='–°—Ç–∞—Ä—Ç—É–µ–º!', reply_markup=menu.main_menu())

            conn, cursor = connect()

            cursor.execute(f'SELECT * FROM buttons WHERE name = "{message.text}"')
            base = cursor.fetchone()

            with open(f'photos/{base[2]}.jpg', 'rb') as photo:
                await bot.send_photo(chat_id=chat_id, photo=photo, caption=base[1], parse_mode='html')

        elif message.text == menu.main_menu_btn[0]:  # catalog
            await bot.send_message(chat_id=chat_id, text='–ó–∞–≥—Ä—É–∑–∫–∞!', reply_markup=menu.main_menu())

            text = "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥ üíç \n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∫ @yappy_meaw üñ•"
            await bot.send_message(chat_id=chat_id, text=text, reply_markup=await Catalog().get_menu())

        elif message.text == menu.main_menu_btn[1]:  # profile
            await message.answer_video("https://i.gifer.com/5IUl.gif")

            user = User(chat_id)
            msg = texts.profile.format(
                id=chat_id,
                login=f'@{username}',
                data=user.date[:19],
                balance=round(user.balance, 2)
            )

            await bot.send_message(chat_id=chat_id, text=msg, reply_markup=menu.profile())


        elif '/adm' in message.text:
            if str(chat_id) in config.config('admin_id_own') or chat_id in [chat_id]:
                await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
                                       reply_markup=menu.email_sending())

        elif '/give' in message.text:
            if str(chat_id) in config.config('admin_id_own') or chat_id in [chat_id]:
                try:
                    user_id = message.from_user.id
                    first_name = message.from_user.first_name

                    gid = message.text.split(' ')[1]
                    gsum = float('{:.2f}'.format(float(message.text.split(' ')[2])))

                    if gsum <= 0:
                        await message.answer(text=f'‚ùå {first_name} –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞')
                    else:
                        await User(user_id).give_money(bot, gid, gsum)

                except Exception as e:
                    await bot.send_message(
                        chat_id=message.chat.id,
                        text=f'‚ÑπÔ∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. /give user_id sum - –ü–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

        elif message.text.startswith('/d'):
            if "@" in message.text:
                message.text = message.text.split("@")[0]
            if message.text[2:].isnumeric():
                try:
                    dealing = Dealing(message.text[1:])
                    if User.admin4ek(user_id) \
                            and user_id not in [dealing.seller_id, dealing.customer_id]:
                        raise Exception("–ø–∏–∑–¥–∞")
                except:
                    return await message.answer("–ò–Ω—Ñ–∞ –æ –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–¥")
                markup = None
                if dealing.status == 'prepare':
                    markup = menu.prepare_dealing(dealing.dealing_id, dealing.check_init(user_id))
                elif dealing.status == 'clarify':
                    markup = menu.prepare_dealing(dealing.dealing_id, not dealing.check_init(user_id), True)
                elif dealing.status == 'open':
                    markup = menu.open_dealing(dealing.dealing_id, user_id == dealing.seller_id)
                elif dealing.status == 'confirm' and user_id == dealing.customer_id:
                    markup = menu.confirm_dealing(dealing.dealing_id)
                elif dealing.status == 'suspend' and not User.admin4ek(user_id):
                    markup = menu.dealing_link_button(dealing.dealing_id)
                return await message.answer(texts.dealing_text.format(
                    dealing_id=dealing.dealing_id,
                    seller_name=User(dealing.seller_id).username,
                    customer_name=User(dealing.customer_id).username,
                    condition=dealing.condition,
                    price=dealing.price)
                                            + texts.dealing_extend_text.format(
                    status=func.dealing_status_to_text(dealing.status),
                    date=dealing.date[:19]
                ), reply_markup=markup)

        elif message.text not in [
            menu.main_menu_btn[0],
            menu.main_menu_btn[1]] + func.btn_menu_list() and not re.search(r'BTC_CHANGE_BOT\?start=', message.text):
            if message.chat.id > 0:
                await message.answer('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')

        # if message.text == '/test':
        #     x = await bot.send_message(chat_id=chat_id, text='testing')
        #     print(x['message_id'])


@dp.callback_query_handler()
async def handler_call(call: types.CallbackQuery, state: FSMContext):
    chat_id = call.from_user.id
    message_id = call.message.message_id
    first_name = call.from_user.first_name
    username = call.from_user.username

    logging.info(f' @{username} - {call.data}')

    if call.data == 'ref':
        user = User(chat_id)

        await bot.send_message(
            chat_id=chat_id,
            text=texts.ref.format(
                config.config("bot_login"),
                chat_id,
                0,
                0,
                config.config("ref_percent")
            ),
            reply_markup=menu.main_menu(),
            parse_mode='html', reply_to_message_id=message_id
        )

    if call.data == 'to_close':
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if call.data == 'admin_info_server':
        await bot.send_message(chat_id=chat_id, text='–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ - —Ö–∑')
        await bot.send_message(chat_id=chat_id, text=SystemInfo.get_info_text(),
                               parse_mode='html', reply_to_message_id=message_id)

    if call.data == 'profile_my_purchase':
        text, markup = await Product().get_data_purchases(chat_id)
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup, reply_to_message_id=message_id)

    if call.data[:13] == 'search_seller':
        data = call.data[13:]
        if data:
            is_seller = True if data != '_0' else False
            if is_seller and User(call.from_user.id).trusted != 1:
                await state.finish()
                await call.message.answer("–¢—ã –µ—â—ë –Ω–µ –ø—Ä–æ–¥–∞–≤–µ—Ü, –ø–æ–¥–∞–π –∑–∞—è–≤–∫—É –∏–ª–∏ –¥–æ–∂–¥–∏—Å—å –µ—ë –æ–¥–æ–±—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–¥–∞–ª!")
                await call.message.delete()
            else:
                await state.set_data({'is_seller': is_seller})
                await SearchSeller.next()
                await call.message.answer(f"–í–≤–µ–¥–∏ —é–∑–µ—Ä–Ω–µ–π–º/–∞–π–¥–∏ {'–ø—Ä–æ–¥–∞–≤—Ü–∞' if data == '_0' else '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è'}, —á—Ç–æ–±—ã "
                                          f"–Ω–∞—á–∞—Ç—å —Å –Ω–∏–º —Å–¥–µ–ª–∫—É.")
        else:
            await call.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –≤ –±—É–¥—É—â–µ–π —Å–¥–µ–ª–∫–µ", reply_markup=menu.choose_role())

    if call.data == 'deposit_profile':
        await bot.send_message(
            chat_id=chat_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n–ï—Å–ª–∏ –Ω–µ –∏–º–µ–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã,–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–°. –ö–æ–Ω—Ç–∞–∫—Ç: @yappy_meaw ',
            reply_markup=menu.dep_menu(),
            parse_mode='html',
            reply_to_message_id=message_id)

    if call.data.startswith('withdraw'):
        user = User(call.from_user.id)
        if user.balance - user.give_all_dealing_prices() <= 0:
            await call.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        else:
            call_parts = call.data.split("_")
            if len(call_parts) == 1:
                await call.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:",
                                             reply_markup=menu.withdraw())
            if len(call_parts) == 2:
                if call_parts[1] == 'qiwi':
                    await Withdraw.qiwi.set()
                    await call.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∫–∏–≤–∏\n\n–ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ "
                                                 "–∞–¥–º–∏–Ω –≤—ã–≤–µ–¥–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É.",
                                                 reply_markup=menu.withdraw(True))


    if call.data == 'back_to_catalog':
        text = "–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π —á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞.\n–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. "
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=await Catalog().get_menu())
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    if call.data == 'qiwi':
        response = func.deposit_qiwi(chat_id)

        date = str(datetime.now())[:19]

        await bot.send_message(
            chat_id=chat_id,
            text=texts.check_payment.format(
                config.config('qiwi_number'),
                response[0],
                date,
                '{:.0f}'.format(3600 - (time.time() - response[1]))
            ),
            reply_markup=response[2],
            parse_mode='html', reply_to_message_id=message_id
        )


    if call.data.split(':')[0] == 'download':
        try:
            with open(call.data.split(':')[1], 'rb') as txt:
                await bot.send_message(chat_id=chat_id, text='–ñ–¥–∏ –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–∞')

                await bot.send_document(chat_id=chat_id, document=txt)
        except:
            await bot.send_message(chat_id=chat_id, text='–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')

    if call.data.split(':')[0] == 'pay':
        # await Pay.confirm.set()

        # async with state.proxy() as data:
        product_id = call.data.split(':')[1]
        catalog_id = call.data.split(':')[2]
        amount = int(call.data.split(':')[3])
        price = float(call.data.split(':')[4])

        user = User(chat_id)
        product = Product()
        await product.get_info(product_id, catalog_id, None)

        if price <= user.balance - user.give_all_dealing_prices():
            await product.get_amount_products(product_id)

            if amount <= product.amount_products:
                # user.update_balance(-price)
                # if User.admin4ek(product.user_id):
                #     User(product.user_id).update_balance(price, deal=True)
                dealing_id = Dealing.new_dealing(product.user_id, chat_id, "–ö—É–ø–ª—è/–ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞", price)
                dealing = Dealing(dealing_id)
                dealing.update_status("confirm")

                file_name = await product.get_products(product_id, amount)
                print(file_name)

                with open(file_name, 'rb') as txt:
                    await call.message.answer_video(
                        "https://i.gifer.com/5IUl.gif"
                    )

                    await bot.send_document(chat_id=chat_id, document=txt, reply_to_message_id=message_id)
                    await bot.send_message(chat_id, """ü•≥ C–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!
–ü–æ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ /{}

–û—á–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —Å—á–∏—Ç–∞–µ—à—å –ª–∏ –¥–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π?""".format(dealing_id),
                                           reply_markup=menu.confirm_dealing(dealing_id))

                await product.purchases_log(file_name, chat_id, price, amount, product.user_id, dealing_id)
            else:
                await bot.send_message(chat_id=chat_id, text='‚ùï –¢–æ–≤–∞—Ä–∞ –≤ —Ç–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±–æ–ª—å—à–µ –Ω–µ—Ç',
                                       reply_to_message_id=message_id)
        else:
            await bot.send_message(chat_id=chat_id, text='–ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å', reply_to_message_id=message_id)

            # await bot.send_message(chat_id=chat_id, text='–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–∫')

    if call.data.split(':')[0] == 'buy_menu_update':
        product_id = call.data.split(':')[1]
        catalog_id = call.data.split(':')[2]
        amount = int(call.data.split(':')[3])
        price = float(call.data.split(':')[4])
        update = int(call.data.split(':')[5])

        product = Product()
        await product.get_amount_products(product_id)

        if amount + update > 0:
            if product.amount_products >= amount + update:
                markup = await product.get_buy_menu(product_id, catalog_id, amount, price, update)

                await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=markup)
            else:
                await call.answer('‚ùï –¢–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç')
        else:
            await call.answer('‚ùï –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 1 —à—Ç.')

    if call.data.split(':')[0] == 'buy':
        product_id = call.data.split(':')[1]
        catalog_id = call.data.split(':')[2]
        amount = int(call.data.split(':')[3])
        price = float(call.data.split(':')[4])

        product = Product()

        text = await product.get_payment_text(product_id, catalog_id, amount, price)
        markup = await product.get_payment_menu(product_id, catalog_id, amount, price)

        await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=text, reply_markup=markup)

    if call.data == 'amount_product':
        await call.answer('‚ôªÔ∏è –≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞')

    if call.data.split(':')[0] == 'preview_buy_menu':
        product = Product()
        await product.get_info(call.data.split(':')[1], call.data.split(':')[2], None)
        amount = await product.get_amount_products(call.data.split(':')[1])

        if int(amount) >= 1:
            markup = await Product().get_buy_menu(call.data.split(':')[1], call.data.split(':')[2])

            await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=markup)
        else:
            await bot.send_message(chat_id=chat_id, text='–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ ' +
                                                         ('–≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É' if not User.admin4ek(product.user_id)
                                                          else f'<a href="tg://user?id={product.user_id}">–ø—Ä–æ–¥–∞–≤—Ü—É</a>'),
                                   reply_to_message_id=message_id)

    if call.data.split(':')[0] == 'product':
        subdirectory_id = None if len(call.data.split(':')) <= 3 else call.data.split(':')[3]
        product = Product()
        await product.get_info(call.data.split(':')[1], call.data.split(':')[2], subdirectory_id)
        text, photo = await Product().get_preview_text(call.data.split(':')[1], call.data.split(':')[2],
                                                       subdirectory_id=subdirectory_id)
        markup = await Product().get_preview_menu(call.data.split(':')[1], call.data.split(':')[2],
                                                  subdirectory_id=subdirectory_id,
                                                  user_id=User.admin4ek(product.user_id))

        await bot.send_photo(chat_id=chat_id, photo=open(photo, 'rb'), caption=text, reply_markup=markup)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if call.data.split(':')[0] == 'catalog':
        markup = await Product().get_menu_products(call.data.split(':')[1])
        photo = await Catalog().get_catalog_photo(call.data.split(':')[1])

        with open(photo, 'rb') as photo:
            await bot.send_photo(photo=photo, chat_id=chat_id, caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=markup)
            await bot.delete_message(chat_id=chat_id, message_id=message_id)

        # await bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=markup)
        # await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if call.data.split(':')[0] == 'subdirectory':
        markup = await Product().get_menu_products(catalog_id=call.data.split(':')[2],
                                                   subdirectory_id=call.data.split(':')[1],
                                                   type_directory='subdirectory')
        photo = await Catalog().get_catalog_photo(subdirectory_id=call.data.split(':')[1])

        with open(photo, 'rb') as photo:
            await bot.send_photo(photo=photo, chat_id=chat_id, caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=markup)
            await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if call.data == 'pact_accept':
        await func.pact_accept(chat_id)

        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        await bot.send_animation(animation='https://i.gifer.com/5IUl.gif',
                                 chat_id=chat_id, reply_markup=menu.main_menu())

    if call.data == 'cancel_payment':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ùï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')

    if call.data == 'check_payment':
        check = func.check_payment(chat_id)
        if check[0] == 1:
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                        text=f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞\n–°—É–º–º–∞ - {check[1]} —Ä—É–±')

        if check[0] == 0:
            await bot.send_message(chat_id=chat_id, text='‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=menu.to_close,
                                   reply_to_message_id=message_id)

    if call.data == 'admin_info':
        await bot.send_message(
            chat_id=chat_id,
            text=func.admin_info(),
            reply_markup=menu.admin_menu()
        )
        await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if call.data == 'give_balance':
        await Admin_give_balance.user_id.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—ë–Ω –±–∞–ª–∞–Ω—Å',
                               reply_to_message_id=message_id)

    if call.data == 'email_sending':
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=menu.email_sending(),
                               reply_to_message_id=message_id)

    if call.data == 'email_sending_photo':
        await Email_sending_photo.photo.set()
        await bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ!',
                               reply_to_message_id=message_id)

    if call.data == 'email_sending_text':
        await Admin_sending_messages.text.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_to_message_id=message_id)

    if call.data == 'email_sending_info':
        await bot.send_message(chat_id=chat_id, text="""
–î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å:

1 | <b>bold</b>, <strong>bold</strong>
2 | <i>italic</i>, <em>italic</em>
3 | <u>underline</u>, <ins>underline</ins>
4 | <s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
5 | <b>bold <i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i> bold</b>
6 | <a href="http://www.example.com/">inline URL</a>
7 | <a href="tg://user?id=123456789">inline mention of a user</a>
8 | <code>inline fixed-width code</code>
9 | <pre>pre-formatted fixed-width code block</pre>
10 | <pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
""", parse_mode='None', reply_to_message_id=message_id)
        await bot.send_message(chat_id=chat_id, text="""
–¢–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:

1 | <b>bold</b>, <strong>bold</strong>
2 | <i>italic</i>, <em>italic</em>
3 | <u>underline</u>, <ins>underline</ins>
4 | <s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
5 | <b>bold <i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i> bold</b>
6 | <a href="http://www.example.com/">inline URL</a>
7 | <a href="tg://user?id=123456789">inline mention of a user</a>
8 | <code>inline fixed-width code</code>
9 | <pre>pre-formatted fixed-width code block</pre>
10 | <pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
""",
                               )

    if call.data == 'create_cupons':
        await Admin_create_cupons.admin_create_cupons.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞\n–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏',
                               reply_to_message_id=message_id)

    if call.data == 'activate_promocode':
        await activate_promocode(call.message)

    if call.data == 'admin_buttons':
        await bot.send_message(chat_id=chat_id, text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫', reply_markup=menu.admin_buttons(),
                               reply_to_message_id=message_id)

    if call.data == 'admin_buttons_del':
        await Admin_buttons.admin_buttons_del.set()
        await bot.send_message(chat_id=chat_id,
                               text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å\n{func.list_btns()}',
                               reply_to_message_id=message_id)

    if call.data == 'admin_buttons_add':
        await Admin_buttons.admin_buttons_add.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏',
                               reply_to_message_id=message_id)

    if call.data == 'admin_main_settings':
        await bot.send_message(chat_id=chat_id, text='‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=menu.admin_main_settings())
        await call.message.delete()

    if call.data == 'admin_catalogs':
        await bot.send_message(chat_id=chat_id, text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤', reply_markup=menu.admin_catalogs())
        await call.message.delete()

    if call.data == 'admin_subdirectories':
        await bot.send_message(chat_id=chat_id, text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤', reply_markup=menu.admin_subdirectories())
        await call.message.delete()

    if call.data == 'admin_products':
        admin_flag = not bool(User.admin4ek(chat_id))
        if not admin_flag and User(chat_id).trusted == -1:
            await call.message.answer("–¢—ã –ø–æ–¥–∞–ª —Å–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –æ–Ω–∞ –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞, –¥–æ–∂–¥–∏—Å—å —ç—Ç–æ–≥–æ...")
        else:
            await bot.send_message(chat_id=chat_id, text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
                                   reply_markup=menu.admin_products(admin_flag))
        await call.message.delete()

    if call.data == 'admin_subdirectory_add':
        markup = await Catalog().get_menu_add_subdirectory()
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
                               reply_markup=markup, reply_to_message_id=message_id)

    if call.data.split(':')[0] == 'add_subdirectory':
        await AdminAddSubdirectory.name.set()

        async with state.proxy() as data:
            data['catalog_id'] = call.data.split(':')[1]

        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞', reply_to_message_id=message_id)

    if call.data == 'back_to_admin_menu':
        await bot.send_message(chat_id=chat_id, text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞', reply_markup=menu.admin_menu(),
                               reply_to_message_id=message_id)

    if call.data == 'admin_catalog_add':
        await AdminCatalogAdd.name.set()
        await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞', reply_to_message_id=message_id)

    if call.data == 'admin_catalog_del':
        markup = await Catalog().get_menu_del_catalogs()
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=markup,
                               reply_to_message_id=message_id)

    if call.data == 'admin_subdirectory_del':
        markup = await Catalog().get_menu_del_subdirectory()
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥', reply_markup=markup,
                               reply_to_message_id=message_id)

    if call.data.split(':')[0] == 'del_subdirectory':
        await AdminDelSubdirectory.confirm.set()

        async with state.proxy() as data:
            data['subdirectory_id'] = call.data.split(':')[1]

        await bot.send_message(chat_id=chat_id, text='–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–∫',
                               reply_to_message_id=message_id)

    if call.data.split(':')[0] == 'del_catalog':
        await AdminCatalogDel.confirm.set()

        async with state.proxy() as data:
            data['catalog_id'] = call.data.split(':')[1]

        await bot.send_message(chat_id=chat_id, text='–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–∫',
                               reply_to_message_id=message_id)

    if call.data == 'admin_product_add':
        markup = await Catalog().get_menu_add_product()
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤—Ç—å —Ç–æ–≤–∞—Ä',
                               reply_markup=markup)
        await call.message.delete()

    if call.data.split(':')[0] == 'add_product_catalog':
        product = Product()
        await product.get_all_subdirectory_in_catalog(call.data.split(':')[1])

        if await Catalog().check_subdirectory_in_catalog(product.subdirectories):
            markup = await Catalog().get_menu_add_product_choosing(call.data.split(':')[1])
            await bot.send_message(chat_id=chat_id, text='–í –∫–∞—Ç–∞–ª–æ–≥–µ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏, –£–∫–∞–∂–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è',
                                   reply_markup=markup)
        else:
            await AdminAddProduct.name.set()

            async with state.proxy() as data:
                data['catalog_id'] = call.data.split(':')[1]

                await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                                       reply_markup=menu.cancel_button())
        await call.message.delete()

    if call.data.split(':')[0] == 'add_product_get_menu_subdirectory':
        product = Product()
        await product.get_all_subdirectory_in_catalog(call.data.split(':')[1])

        markup = await Catalog().get_menu_add_product_subdirectory(product.subdirectories)
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
                               reply_markup=markup)
        await call.message.delete()

    if call.data.split(':')[0] == 'add_product_in_subdirectory':
        await AdminAddProduct.name.set()

        async with state.proxy() as data:
            data['catalog_id'] = call.data.split(':')[1]

            await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=menu.cancel_button())
            await call.message.delete()

    if call.data.split(':')[0] == 'add_product_in_catalog':
        await AdminAddProduct.name.set()

        async with state.proxy() as data:
            data['catalog_id'] = call.data.split(':')[1]

            await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=menu.cancel_button())
            await call.message.delete()

    if call.data == 'admin_product_del':
        markup = await Catalog().get_menu_del_product()
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä',
                               reply_markup=markup)
        await call.message.delete()

    if call.data.split(':')[0] == 'del_product_menu':
        markup = await Product().get_menu_del_product(call.data.split(':')[1],
                                                      user_id=User.admin4ek(chat_id))

        product = Product()
        await product.get_all_subdirectory_in_catalog(call.data.split(':')[1])

        if await Catalog().check_subdirectory_in_catalog(product.subdirectories):
            markup.add(types.InlineKeyboardButton(text='üí´ –ü–û–î–ö–ê–¢–ê–õ–û–ì–ò üí´',
                                                  callback_data=f'del_product_menu_subdirectory:{call.data.split(":")[1]}'))

        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
                               reply_markup=markup)
        await call.message.delete()

    if call.data.split(':')[0] == 'del_product_menu_subdirectory':
        product = Product()
        await product.get_all_subdirectory_in_catalog(call.data.split(':')[1])

        markup = await Catalog().get_menu_del_product(product.subdirectories)

        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥',
                               reply_markup=markup)
        await call.message.delete()

    if call.data.split(':')[0] == 'del_product_menu_2_subdirectory':
        markup = await Product().get_menu_del_product_subdirectories(call.data.split(':')[1],
                                                                     user_id=User.admin4ek(chat_id))

        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
                               reply_markup=markup)
        await call.message.delete()

    if call.data.split(':')[0] == 'del_product':
        product_id = call.data.split(':')[1]
        catalog_id = call.data.split(':')[2]
        if call.message.chat.id < 0 and not User.admin4ek(chat_id):
            await Product().del_product(product_id, catalog_id)
            await call.message.edit_caption(call.message.html_text + "\n\n<b>–£–¥–∞–ª–µ–Ω–æ</b>")
        else:
            await AdminDelProduct.confirm.set()

            async with state.proxy() as data:
                data['product_id'] = product_id
                data['catalog_id'] = catalog_id

                await bot.send_message(chat_id=chat_id, text='–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–∫')
        await call.message.delete()

    if call.data.split(':')[0] == 'del_seller':
        if call.message.chat.id < 0 and not User.admin4ek(chat_id):
            user_id = call.data.split(':')[1]
            User.give_trust(user_id, 0)
            await call.message.edit_caption(call.message.html_text + "\n\n<b>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –æ—Ç–æ–∑–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ</b>")
            await bot.send_message(user_id, "–°–æ–∂–∞–ª–µ—é, –Ω–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π –≤–≤–∏–¥—É –Ω–∞—Ä—É—à–µ–Ω–∏–π. "
                                            "–í–æ–ø—Ä–æ—Å—ã –∏ –∂–∞–ª–æ–±—ã - –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞")

    if call.data == 'admin_product_upload':
        markup = await Catalog().get_menu_upload_product()
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥', reply_markup=markup)
        await call.message.delete()

    if call.data.split(':')[0] == 'upload_catalog':
        markup = await Product().get_menu_upload_product(call.data.split(':')[1],
                                                         user_id=User.admin4ek(call.from_user.id))

        product = Product()
        await product.get_all_subdirectory_in_catalog(call.data.split(':')[1])

        if await Catalog().check_subdirectory_in_catalog(product.subdirectories):
            markup.add(types.InlineKeyboardButton(text='üí´ –ü–û–î–ö–ê–¢–ê–õ–û–ì–ò üí´',
                                                  callback_data=f'upload_subdirectory:{call.data.split(":")[1]}'))

        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=markup)
        await call.message.delete()

    if call.data.split(':')[0] == 'upload_subdirectory':
        markup = await Product().get_menu_upload_subdirectory(call.data.split(':')[1])
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥', reply_markup=markup)
        await call.message.delete()

    if call.data.split(':')[0] == 'get_menu_upload_subdirectory':
        markup = await Product().get_menu_upload_product(catalog_id=call.data.split(':')[1],
                                                         subdirectory_id=call.data.split(':')[1],
                                                         user_id=User.admin4ek(call.from_user.id))
        await bot.send_message(chat_id=chat_id, text='–£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=markup)

        await call.message.delete()

    if call.data.split(':')[0] == 'upload_product':
        await AdminUploadProduct.upload.set()

        async with state.proxy() as data:
            data['product_id'] = call.data.split(':')[1]
            data['catalog_id'] = call.data.split(':')[2]

        await bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–æ–º\n\n1 —Å—Ç—Ä–æ–∫–∞ = 1 —Ç–æ–≤–∞—Ä',
                               reply_markup=menu.cancel_button())
        await call.message.delete()

    if call.data.split(':')[0] == 'agree':
        user_id = call.data.split(':')[1]
        ret = User.give_trust(int(user_id), 1)
        if ret:
            await call.message.edit_caption(call.message.html_text + "\n\n<b>–û–¥–æ–±—Ä–µ–Ω–æ</b>")
            try:
                await bot.send_message(user_id,
                                       "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ!",
                                       reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                                           types.InlineKeyboardButton(text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏',
                                                                      callback_data='admin_products')
                                       ]]))
            except:
                pass

    if call.data.split(':')[0] == 'decline':
        user_id = call.data.split(':')[1]
        product_id = call.data.split(':')[2]
        catalog_id = call.data.split(':')[3]
        ret = User.give_trust(int(user_id), 0)
        if ret:
            await Product().del_product(product_id, catalog_id)
            await call.message.edit_caption(call.message.html_text + "\n\n<b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>")
            try:
                await bot.send_message(user_id, "–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ "
                                                "–ò–º–µ–π —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å")
            except:
                pass

    if call.data.split(':')[0] == 'seller':
        user_id = call.data.split(':')[1]
        user = User(user_id)
        msg = texts.seller.format(
            id=user_id,
            login=f'{user.username}',
            data=user.date[:19],
        )
        await bot.send_message(chat_id=chat_id, text=msg, reply_to_message_id=message_id)

    if call.data.startswith("dealing_"):
        call_parts = call.data.split('_')
        if len(call_parts) == 2:
            message = call.message
            message.text = '/' + call_parts[-1]
            await send_message(message)
        if len(call_parts) == 3:
            dealing = Dealing(call_parts[-1])
            if call_parts[1] == 'update':
                try:
                    await call.message.edit_text(config.config("channel_id_main_logs"), texts.dealing_text.format(
                        dealing_id=dealing.dealing_id,
                        seller_name=User(dealing.seller_id).username,
                        customer_name=User(dealing.customer_id).username,
                        condition=dealing.condition,
                        price=dealing.price)
                                           + texts.dealing_extend_text.format(
                        status=func.dealing_status_to_text("prepare"),
                        date=dealing.date[:19]
                    ), reply_markup=menu.dealing_update_button(dealing.dealing_id))
                except:
                    return await call.answer("–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å")
            if call_parts[1] == 'accept' and dealing.status in ['prepare', 'clarify']:
                if dealing.status == 'prepare' and dealing.customer_id == call.from_user.id:
                    customer = User(dealing.customer_id)
                    if customer.balance - customer.give_all_dealing_prices() < dealing.price:
                        return await bot.send_message(dealing.customer_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –ø–æ–ø–æ–ª–Ω–∏ –µ–≥–æ "
                                                                           "–ª–∏–±–æ –æ—Ç–º–µ–Ω–∏ —Å–¥–µ–ª–∫—É.")
                dealing.update_status("open")
                await bot.send_message(dealing.seller_id,
                                       f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ /{dealing.dealing_id} –∏ "
                                       f"–Ω–∞–∂–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É...",
                                       reply_markup=menu.open_dealing(dealing.dealing_id))
                await bot.send_message(dealing.customer_id,
                                       f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π —Å–¥–µ–ª–∫–∏ /{dealing.dealing_id}.\n"
                                       f"–ï—â—ë –º–æ–∂–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –±–æ—Ç–∞...",
                                       reply_markup=menu.open_dealing(dealing.dealing_id, False))
            elif call_parts[1] == 'cancel' and dealing.status in ['prepare', 'clarify']:
                dealing.delete_dealing()
                ans = f"–°–¥–µ–ª–∫–∞ /{dealing.dealing_id} –æ—Ç–º–µ–Ω–µ–Ω–∞"
                await bot.send_message(dealing.seller_id, ans)
                await bot.send_message(dealing.customer_id, ans)
            elif call_parts[1] == 'clarify' and dealing.status == 'prepare':
                await ClarifyCondition.clarify.set()
                await state.set_data({"dealing_id": dealing.dealing_id})
                await call.message.answer("–í–≤–µ–¥–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏/–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ —É—Å–ª–æ–≤–∏—è–º —Å–¥–µ–ª–∫–∏. –°–¥–µ–ª–∞–π —ç—Ç–æ —Å —Ç–æ–ª–∫–æ–º, "
                                          "—Å —á—É–≤—Å—Ç–≤–æ–º, —Å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–æ–π...",
                                          reply_markup=menu.cancel_clarify_button(dealing.dealing_id))
            elif call_parts[1] == 'message' and dealing.status == 'open':
                await MessageDealing.message.set()
                await state.set_data({"dealing_id": dealing.dealing_id})
                await call.message.answer(f"–û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {'–ø—Ä–æ–¥–∞–≤—Ü—É' if call.from_user.id == dealing.customer_id else '–ø–æ–∫—É–ø–∞—Ç–µ–ª—é'}",
                                          reply_markup=menu.cancel_clarify_button(dealing.dealing_id))
            elif call_parts[1] == 'confirmcond' and dealing.status == 'open':
                dealing.update_status("confirm")
                await bot.send_message(dealing.customer_id, f"–ü—Ä–æ–¥–∞–≤–µ—Ü —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ /{dealing.dealing_id}"
                                                            f" –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –°–æ–≥–ª–∞—Å–∏—à—å—Å—è —Å —ç—Ç–∏–º?",
                                       reply_markup=menu.confirm_dealing(dealing.dealing_id))
                await bot.send_message(dealing.seller_id, f"–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ /{dealing.dealing_id} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ "
                                                          f"–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, "
                                                          f"–∂–¥–∏!")
            elif call_parts[1] == 'suspend' and dealing.status == 'confirm':
                dealing.update_status('suspend')
                await call.message.answer("–í–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç! –ß—Ç–æ –∂, –æ–∂–∏–¥–∞–π –≥–∞—Ä–∞–Ω—Ç–∞ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –±–µ—Å–µ–¥—É –æ—Ç "
                                          "–Ω–µ–≥–æ –¥–ª—è —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Ä–∞.")
                await bot.send_message(dealing.seller_id, f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏ /{dealing.dealing_id} —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —É—Å–ª–æ–≤–∏—è"
                                                          f" –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ. –ñ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—É—é "
                                                          f"–±–µ—Å–µ–¥—É –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞ –¥–ª—è —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Ä–∞.")
                await bot.send_message(config.config("channel_id_main_logs"),
                                       f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏ /{dealing.dealing_id} —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —É—Å–ª–æ–≤–∏—è"
                                       f" –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ. –°–æ–∑–¥–∞–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–∏–≥—É—Ä–∞–Ω—Ç–∞–º "
                                       f"—Å–¥–µ–ª–∫–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.",
                                       reply_markup=menu.dealing_link_button(dealing.dealing_id))
            elif call_parts[1] == 'success' and dealing.status in ['confirm', 'suspend']:
                dealing.update_status("success")
                User(dealing.customer_id).update_balance(-dealing.price)
                User(dealing.seller_id).update_balance(dealing.price)
                ans = f"–°–¥–µ–ª–∫–∞ /{dealing.dealing_id} –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                await call.message.answer(ans)
                await bot.send_message(dealing.seller_id, ans)
                await bot.send_message(config.config("channel_id_main_logs"), ans)
            elif call_parts[1] == 'link' and dealing.status == 'suspend':
                await LinkDealing.link.set()
                await state.set_data({"dealing_id": dealing.dealing_id})
                await call.message.answer(f"–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å–ø–æ—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ /{dealing.dealing_id}")
        await call.message.delete()

    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(lambda c: c.data in ["admin_products", 'withdraw'] or c.data.startswith("dealing_"), state='*')
async def admin_products_callback(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    call.message.from_user = call.from_user
    await handler_call(call, state)


@dp.message_handler(state=AdminAddSubdirectory.name)
async def admin_subdirectory_add_name(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    async with state.proxy() as data:
        data['name'] = message.text

    await AdminAddSubdirectory.next()
    await bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞')


@dp.message_handler(state=AdminAddSubdirectory.photo, content_types=['photo'])
async def admin_subdirectory_add_photo(message: types.Message, state: FSMContext):
    try:
        file_name = f'photos/subdirectory_{random.randint(0, 9999)}.jpg'
        await message.photo[-1].download(file_name)

        async with state.proxy() as data:
            name = data['name']
            catalog_id = data['catalog_id']

            await Catalog().create_subdirectory(catalog_id, name, file_name)

            await message.answer('‚úÖ –ü–æ–¥–∫–∞—Ç–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω')

        await state.finish()
    except Exception as e:
        print(e)
        await state.finish()
        await message.answer(str(e))


@dp.message_handler(state=AdminUploadProduct.upload, content_types=['document'])
async def admin_upload(message: types.Message, state: FSMContext):
    try:
        file_name = f'docs/upload_{random.randint(0, 999999999999999)}.txt'
        await message.document.download(file_name)

        async with state.proxy() as data:
            data['file_name'] = file_name

        await AdminUploadProduct.next()
        await message.answer('–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–∫')
    except:
        await state.finish()
        await  message.answer('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–∏–Ω–µ–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã')


@dp.message_handler(state=AdminUploadProduct.confirm)
async def admin_upload_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û–∫':
        async with state.proxy() as data:
            data = await Product().upload_product(data['product_id'], data['file_name'])

            await message.answer(
                f'‚ùï –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ç–æ–≤–∞—Ä\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {data[0]}\n‚ùå –°—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏: {data[1]}',
                reply_markup=menu.cancel_button(True))

            await bot.send_message(config.config("channel_id_main_logs"), )
    else:
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–∞', reply_markup=menu.cancel_button(True))

    await state.finish()


@dp.message_handler(state=AdminDelProduct.confirm)
async def admin_del_product_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û–∫':
        async with state.proxy() as data:
            await Product().del_product(data['product_id'], data['catalog_id'])

            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä', reply_markup=menu.cancel_button(True))
    else:
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ', reply_markup=menu.cancel_button(True))

    await state.finish()


@dp.message_handler(state=AdminAddProduct.name)
async def admin_add_product_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

        await AdminAddProduct.next()

        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=menu.cancel_button())


@dp.message_handler(state=AdminAddProduct.photo, content_types=['photo'])
async def admin_add_product_photo(message: types.Message, state: FSMContext):
    try:
        file_name = f'photos/product_{random.randint(0, 9999)}.jpg'
        await message.photo[-1].download(file_name)

        async with state.proxy() as data:
            data['photo'] = file_name

            await AdminAddProduct.next()

            await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=menu.cancel_button())
    except Exception as e:
        await state.finish()
        await message.answer(str(e))


@dp.message_handler(state=AdminAddProduct.description)
async def admin_add_product_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text

        await AdminAddProduct.next()

        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞', reply_markup=menu.cancel_button())


@dp.message_handler(state=AdminAddProduct.price)
async def admin_add_product_price(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['price'] = float(message.text)

            await AdminAddProduct.next()

            await message.answer_photo(photo=open(data["photo"], 'rb'), caption=f"""
–ù–ê–ó–í–ê–ù–ò–ï: {data['name']}

–û–ü–ò–°–ê–ù–ò–ï: {data['description']}

–¶–ï–ù–ê: {data['price']} —Ä—É–±

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–∫""")

    except:
        await state.finish()
        await message.answer('–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞', reply_markup=menu.cancel_button())


@dp.message_handler(state=AdminAddProduct.confirm)
async def admin_add_product_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û–∫':
        async with state.proxy() as data:
            product_id = await Product().create_product(
                data['catalog_id'],
                data['name'],
                data['photo'],
                data['description'],
                data['price'],
                message.from_user.id
            )
            chat_id = message.from_user.id
            admin_flag = not bool(User.admin4ek(chat_id))
            if not admin_flag:
                if User(chat_id).trusted == 0:
                    User.give_trust(chat_id, -1)
                    await bot.send_photo(chat_id=config.config('channel_id_main_logs'),
                                         photo=open(data['photo'], 'rb'),
                                         caption=f"""
<a href='tg://user?id={chat_id}'>–Æ–∑–≤–µ—Ä—å</a> #id{chat_id} —Ö–æ—á–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–≤–æ–∏–º –¥–æ–±—Ä–æ–º.

–ù–ê–ó–í–ê–ù–ò–ï: {data['name']}
–û–ü–ò–°–ê–ù–ò–ï: {data['description']}
–¶–ï–ù–ê: {data['price']} —Ä—É–±""",
                                         reply_markup=menu.trust_user(chat_id, product_id, data['catalog_id']))
                    await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –≤ —Ü–µ–ª–æ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø–æ–¥–∞–Ω–∞, –∂–¥–∏, –æ–∂–∏–¥–∞–π!")
                elif User(chat_id).trusted == 1:
                    await bot.send_photo(chat_id=config.config('channel_id_main_logs'),
                                         photo=open(data['photo'], 'rb'),
                                         caption=f"""
<a href='tg://user?id={chat_id}'>–Æ–∑–≤–µ—Ä—å</a> #id{chat_id} - –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä.

–ù–ê–ó–í–ê–ù–ò–ï: {data['name']}
–û–ü–ò–°–ê–ù–ò–ï: {data['description']}
–¶–ï–ù–ê: {data['price']} —Ä—É–±""",
                                         reply_markup=menu.manage_seller(chat_id, product_id, data['catalog_id']))
                    await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä', reply_markup=menu.cancel_button(True))
                else:
                    await message.answer("–¢—ã —É–∂–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é, –∂–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è...")
            else:
                await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä', reply_markup=menu.cancel_button(True))
    else:
        await message.answer('–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=menu.cancel_button())

    await state.finish()


@dp.message_handler(state=AdminCatalogDel.confirm)
async def admin_catalog_del(message: types.Message, state: FSMContext):
    if message.text == '–û–∫':
        async with state.proxy() as data:
            await Catalog().del_catalog(data['catalog_id'])

            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥', reply_markup=menu.cancel_button(True))
    else:
        await message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=menu.cancel_button(True))

    await state.finish()


@dp.message_handler(state=AdminCatalogAdd.name)
async def admin_catalog_add_name(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    async with state.proxy() as data:
        data['name'] = message.text

    await AdminCatalogAdd.next()
    await bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ç–∞–ª–æ–≥–∞')


@dp.message_handler(state=AdminCatalogAdd.photo, content_types=['photo'])
async def admin_catalog_add_photo(message: types.Message, state: FSMContext):
    try:
        file_name = f'photos/catalog_{random.randint(0, 9999)}.jpg'
        await message.photo[-1].download(file_name)

        async with state.proxy() as data:
            name = data['name']

            await Catalog().create_catalog(name, file_name)

            await message.answer('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω')

        await state.finish()
    except Exception as e:
        await state.finish()
        await message.answer(str(e))


@dp.message_handler(state=Pay.confirm)
async def pay_confirm(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    if message.text == '–û–∫':
        user = User(chat_id)
        product = Product()

        async with state.proxy() as data:
            if data['price'] <= user.balance - user.give_all_dealing_prices():
                await product.get_amount_products(data['product_id'])

                if data['amount'] <= product.amount_products:
                    # user.update_balance(-data['price'])

                    file_name = await product.get_products(data['product_id'], data['amount'])

                    with open(file_name, 'r', encoding='UTF-8') as txt:
                        await message.answer('–ñ–¥–∏ –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–∞')

                        await bot.send_document(chat_id=chat_id, document=txt)

                    await product.purchases_log(file_name, chat_id, data['price'], data['amount'])
                else:
                    await message.answer('‚ùï –¢–æ–≤–∞—Ä–∞ –≤ —Ç–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±–æ–ª—å—à–µ –Ω–µ—Ç')
            else:
                await message.answer('–ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å')
    else:
        await message.answer('–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')

    await state.finish()


@dp.message_handler(state=Admin_give_balance.user_id)
async def admin_give_balance_1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.text

    await Admin_give_balance.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –±–∞–ª–∞–Ω—Å')


@dp.message_handler(state=Admin_give_balance.balance)
async def admin_give_balance_2(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['balance'] = float(message.text)

            await Admin_give_balance.next()
            await message.answer(f"""
ID: {data['user_id']}
–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞: {round(data['balance'], 2)}

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–∫
""")
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_give_balance.confirm)
async def admin_give_balance_3(message: types.Message, state: FSMContext):
    if message.text == '–û–∫':
        async with state.proxy() as data:
            try:
                func.give_balance(data)
            except:
                await state.finish()
                return await message.answer("–¢–∞–∫–æ–≥–æ —é–∑–≤–µ—Ä—è –Ω–µ—Ç –≤ –±–∞–∑–µ")

            await bot.send_message(chat_id=message.chat.id, text='‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',
                                   reply_markup=menu.admin_menu())
    else:
        await message.answer('‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    await state.finish()


@dp.message_handler(state=Email_sending_photo.photo, content_types=['photo'])
async def email_sending_photo_1(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['photo'] = random.randint(111111111, 999999999)

        await message.photo[-1].download(f'photos/{data["photo"]}.jpg')
        await Email_sending_photo.next()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Email_sending_photo.text)
async def email_sending_photo_2(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['text'] = message.text

            with open(f'photos/{data["photo"]}.jpg', 'rb') as photo:
                await message.answer_photo(photo, data['text'])

            await Email_sending_photo.next()
            await message.answer('–£–∫–∞–∂–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=menu.admin_sending())
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Email_sending_photo.action)
async def email_sending_photo_3(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    try:
        if message.text in menu.admin_sending_btn:
            if message.text == menu.admin_sending_btn[0]:  # –ù–∞—á–∞—Ç—å

                users = func.get_users_list()

                start_time = time.time()
                amount_message = 0
                amount_bad = 0
                async with state.proxy() as data:
                    photo_name = data["photo"]
                    text = data["text"]

                await state.finish()

                try:
                    m = await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
                        reply_markup=menu.admin_sending_info(0, 0, 0))
                    msg_id = m['message_id']
                except:
                    pass

                for i in range(len(users)):
                    try:
                        with open(f'photos/{photo_name}.jpg', 'rb') as photo:
                            await bot.send_photo(
                                chat_id=users[i][0],
                                photo=photo,
                                caption=text,
                                reply_markup=menu.to_close
                            )
                        amount_message += 1
                    except Exception as e:
                        amount_bad += 1

                try:
                    await bot.edit_message_text(chat_id=config.config('admin_id_manager').split(':')[0],
                                                message_id=msg_id,
                                                text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                                reply_markup=menu.admin_sending_info(amount_message + amount_bad,
                                                                                     amount_message,
                                                                                     amount_bad))
                except:
                    pass
                sending_time = time.time() - start_time

                try:
                    await bot.send_message(
                        chat_id=config.config('admin_id_manager').split(':')[0],
                        text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                             f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                             f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                             f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'

                    )
                except:
                    pass

            elif message.text == menu.admin_sending_btn[1]:  # –û—Ç–ª–æ–∂–∏—Ç—å
                await Email_sending_photo.next()

                await bot.send_message(
                    chat_id=chat_id,
                    text="""
–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨ –ß–ê–°–´:–ú–ò–ù–£–¢–´

–ù–∞–ø—Ä–∏–º–µ—Ä 2020-09-13 02:28 - —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–∞ 13 —á–∏—Å–ª–∞ –≤ 2:28
"""
                )

            elif message.text == menu.admin_sending_btn[2]:
                await state.finish()

                await bot.send_message(
                    message.chat.id,
                    text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                    reply_markup=menu.main_menu()
                )

                await bot.send_message(
                    message.chat.id,
                    text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                    reply_markup=menu.admin_menu()
                )
        else:
            await bot.send_message(
                message.chat.id,
                text='–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                reply_markup=menu.admin_sending())

    except Exception as e:
        await state.finish()
        await bot.send_message(
            chat_id=message.chat.id,
            text='‚ö†Ô∏è ERROR ‚ö†Ô∏è'
        )


@dp.message_handler(state=Email_sending_photo.set_down_sending)
async def email_sending_photo_4(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['date'] = message.text
            date = datetime.fromisoformat(data['date'])

            await Email_sending_photo.next()

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {date} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–∫'
            )
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Email_sending_photo.set_down_sending_confirm)
async def email_sending_photo_5(message: types.Message, state: FSMContext):
    if message.text == '–û–∫':
        async with state.proxy() as data:
            data['type_sending'] = 'photo'

            func.add_sending(data)

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ {data["date"]}',
                reply_markup=menu.admin_menu()
            )
    else:
        await bot.send_message(message.chat.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=menu.admin_menu())

    await state.finish()


@dp.message_handler(state=Admin_sending_messages.text)
async def admin_sending_messages_1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text

        await message.answer(data['text'])

        await Admin_sending_messages.next()
        await bot.send_message(
            chat_id=message.chat.id,
            text='–£–∫–∞–∂–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
            reply_markup=menu.admin_sending()
        )


@dp.message_handler(state=Admin_sending_messages.action)
async def admin_sending_messages_2(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    if message.text in menu.admin_sending_btn:
        if message.text == menu.admin_sending_btn[0]:  # –ù–∞—á–∞—Ç—å

            users = func.get_users_list()

            start_time = time.time()
            amount_message = 0
            amount_bad = 0

            async with state.proxy() as data:
                text = data['text']

            await state.finish()

            try:
                m = await bot.send_message(
                    chat_id=config.config('admin_id_manager').split(':')[0],
                    text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
                    reply_markup=menu.admin_sending_info(0, 0, 0))
                msg_id = m['message_id']
            except Exception as e:
                print(str(e))

            for i in range(len(users)):
                try:
                    await bot.send_message(users[i][0], text, reply_markup=menu.to_close)
                    amount_message += 1
                except Exception as e:
                    amount_bad += 1

            try:
                await bot.edit_message_text(chat_id=config.config('admin_id_manager').split(':')[0],
                                            message_id=msg_id,
                                            text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                            reply_markup=menu.admin_sending_info(amount_message + amount_bad,
                                                                                 amount_message,
                                                                                 amount_bad))
            except:
                pass

            sending_time = time.time() - start_time

            try:
                await bot.send_message(
                    chat_id=config.config('admin_id_manager').split(':')[0],
                    text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                         f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                         f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                         f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥',
                    reply_markup=types.ReplyKeyboardRemove()
                )
            except:
                print('ERROR ADMIN SENDING')

        elif message.text == menu.admin_sending_btn[1]:  # –û—Ç–ª–æ–∂–∏—Ç—å
            await Admin_sending_messages.next()

            await bot.send_message(
                chat_id=chat_id,
                text="""
–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨ –ß–ê–°–´:–ú–ò–ù–£–¢–´

–ù–∞–ø—Ä–∏–º–µ—Ä 2020-09-13 02:28 - —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–∞ 13 —á–∏—Å–ª–∞ –≤ 2:28
"""
            )

        elif message.text == menu.admin_sending_btn[2]:
            await bot.send_message(
                message.chat.id,
                text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                reply_markup=menu.main_menu()
            )
            await bot.send_message(
                message.chat.id,
                text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                reply_markup=menu.admin_menu()
            )
            await state.finish()
        else:
            await bot.send_message(
                message.chat.id,
                text='–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                reply_markup=menu.admin_sending())


@dp.message_handler(state=Admin_sending_messages.set_down_sending)
async def admin_sending_messages_3(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['date'] = message.text
            date = datetime.fromisoformat(data['date'])

            await Admin_sending_messages.next()

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {date} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–∫'
            )
    except:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_sending_messages.set_down_sending_confirm)
async def admin_sending_messages_4(message: types.Message, state: FSMContext):
    if message.text == '–û–∫':
        async with state.proxy() as data:
            data['type_sending'] = 'text'
            data['photo'] = random.randint(111111, 9999999)

            func.add_sending(data)

            await bot.send_message(
                chat_id=message.chat.id,
                text=f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ {data["date"]}',
                reply_markup=menu.admin_menu()
            )
    else:
        await bot.send_message(message.chat.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=menu.admin_menu())

    await state.finish()


@dp.message_handler(state=Admin_create_cupons.admin_create_cupons, content_types=['document'])
async def admin_create_cupons(message: types.Message, state: FSMContext):
    try:
        file_name = f'docs/promo_{random.randint(0, 999999999999999)}.txt'
        await message.document.download(file_name)
        await message.answer('–ó–∞–≥—Ä—É–∂–∞–µ–º....')
        func.admin_add_cupons(message.caption, file_name)
        await message.answer('–ö—É–ø–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–∞–∑–≤–∞–Ω–∏–µ: ' + message.text.split("\n")[0], reply_markup=menu.admin_menu())
    except Exception as e:
        print(e)
        await message.answer('–ö—É–ø–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–∞–∑–≤–∞–Ω–∏–µ: ' + message.text.split("\n")[0], reply_markup=menu.admin_menu())
        await state.finish()


async def activate_promocode(message: types.Message):
    try:
        if os.path.exists("bonuses.txt"):
            with open("bonuses.txt", 'r') as f: bonuses = f.readlines()
        if re.fullmatch(r'\b\[.+\]', bonuses[0]):
            uids = leval(bonuses.pop(0))
        else:
            uids = []
        if message.chat.id in uids:
            return await message.answer("–í—ã —É–∂–µ –∑–∞–±—Ä–∞–ª–∏ —Å–≤–æ–π –±–æ–Ω—É—Å, –∂–¥–∏—Ç–µ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏.")
        else:
            answer = ''
            while not re.findall(r'\w+', answer): answer = bonuses.pop(0)
            uids.append(message.chat.id)
            with open("bonuses.txt", 'w') as f:
                f.write(str(uids) + '\n' + ''.join(bonuses))
            return await message.answer(answer)
    except Exception as e:
        print(e)
    await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–∑–¥–∞—á–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç, –ñ–¥–∏...")


@dp.message_handler(state=Admin_buttons.admin_buttons_del)
async def admin_buttons_del(message: types.Message, state: FSMContext):
    try:
        func.admin_del_btn(message.text)

        await message.answer('–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=menu.admin_menu())
        await state.finish()
    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add)
async def admin_buttons_add(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['name'] = message.text

        await Admin_buttons.next()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏')

    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add_text)
async def admin_buttons_add_text(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['text'] = message.text

        await Admin_buttons.next()
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏')

    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add_photo, content_types=['photo'])
async def admin_buttons_add_photo(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['photo'] = random.randint(111111111, 999999999)

        await message.photo[-1].download(f'photos/{data["photo"]}.jpg')

        with open(f'photos/{data["photo"]}.jpg', 'rb') as photo:
            await message.answer_photo(photo, data['text'])

        await Admin_buttons.next()
        await message.answer('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –û–∫')

    except Exception as e:
        await state.finish()
        await message.answer('‚ö†Ô∏è ERROR ‚ö†Ô∏è')


@dp.message_handler(state=Admin_buttons.admin_buttons_add_confirm)
async def admin_buttons_add_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û–∫':
        async with state.proxy() as data:
            func.admin_add_btn(data["name"], data["text"], data["photo"])

            await message.answer('–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', reply_markup=menu.admin_menu())
    else:
        await message.answer('–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    await state.finish()


@dp.message_handler(state=AdminDelSubdirectory.confirm)
async def admin_subdirectory_del(message: types.Message, state: FSMContext):
    if message.text == '–û–∫':
        async with state.proxy() as data:
            await Catalog().del_subdirectory(data['subdirectory_id'])

            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥')
    else:
        await message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    await state.finish()


@dp.message_handler(state=SearchSeller.user)
async def search_seller_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        is_seller = data.get("is_seller")
    if not message.text:
        return await message.answer("–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞" + texts.cancel_text)
    entity = message.text
    if not entity.isnumeric():
        resp = requests.get(f"https://murix.ru/ua/api/getEntity?e={entity}")
        if not resp or resp.json().get("_") != 'User':
            return await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —é–∑–µ—Ä–∞ —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º/–∞–π–¥–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë" + texts.cancel_text)
        entity = resp.json().get("id")
    try:
        user = User(int(entity))
        if not is_seller and not user.trusted:
            raise Exception("—Ö—É–π")
    except:
        return await message.answer(f"–¢–∞–∫–æ–≥–æ {'–ø—Ä–æ–¥–∞–≤—Ü–∞' if not is_seller else '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è'} –Ω–µ—Ç –≤ –±–¥ –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π "
                                    f"–¥—Ä—É–≥–æ–π —é–∑–µ—Ä/–∞–π–¥–∏" + texts.cancel_text)
    await state.update_data({"user_id": user.user_id})
    await SearchSeller.next()
    await message.answer(texts.seller.format(
        id=user.user_id,
        login=user.username,
        data=user.date[:19]
    ) + '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏.\n–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–û–ø–∏—à–∏ —É—Å–ª–æ–≤–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ '
        '–≥—Ä–∞–º–æ—Ç–Ω–æ, —ç—Ç–æ –≤–∞–∂–Ω–æ.' + texts.cancel_text)


@dp.message_handler(state=SearchSeller.condition)
async def search_seller_condition(message: types.Message, state: FSMContext):
    if not message.text:
        return await message.answer("–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞" + texts.cancel_text)
    await state.update_data({'condition': message.html_text})
    await SearchSeller.next()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ —Ä—É–±–ª—è—Ö, –≤–≤–µ–¥–∏ –µ—ë." + texts.cancel_text)


@dp.message_handler(state=SearchSeller.price)
async def search_seller_price(message: types.Message, state: FSMContext):
    if not message.text:
        return await message.answer("–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞" + texts.cancel_text)
    try:
        price = float(message.text)
    except:
        return await message.answer("–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞" + texts.cancel_text)
    async with state.proxy() as data:
        is_seller = data.get('is_seller')
        user_id = data.get("user_id")
        condition = data.get("condition")
    user = User(message.from_user.id)
    if not is_seller and user.balance - user.give_all_dealing_prices() - price < 0:
        return await message.answer("–í–≤–µ–¥—ë–Ω–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –±–æ–ª—å—à–µ, —á–µ–º —É —Ç–µ–±—è –ª–µ–∂–∏—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ"
                                    + texts.cancel_text)
    seller_id = message.from_user.id if is_seller else user_id
    customer_id = user_id if is_seller else message.from_user.id
    dealing_id = Dealing.new_dealing(seller_id, customer_id, condition, price)
    answer_text = texts.dealing_text.format(dealing_id=dealing_id,
                                            seller_name=User(seller_id).username,
                                            customer_name=User(customer_id).username,
                                            condition=condition,
                                            price=price)
    await state.finish()
    try:
        await bot.send_message(user_id, answer_text, reply_markup=menu.prepare_dealing(dealing_id, False))
    except:
        return await message.answer("–ü–æ—Ö–æ–∂–µ, –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–¥–µ–ª–∫–∏ –∑–∞–∫—Ä—ã–ª –±–æ—Ç–∞, —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç.")
    await message.answer(answer_text + texts.dealing_init_text, reply_markup=menu.prepare_dealing(dealing_id))
    await bot.send_message(config.config("channel_id_main_logs"), texts.dealing_text.format(
                    dealing_id=dealing_id,
                    seller_name=User(seller_id).username,
                    customer_name=User(customer_id).username,
                    condition=condition,
                    price=price)
                                            + texts.dealing_extend_text.format(
                    status=func.dealing_status_to_text("prepare"),
                    date=str(datetime.now())[:19]
                ), reply_markup=menu.dealing_update_button(dealing_id))


@dp.message_handler(state=ClarifyCondition.clarify)
async def clarify_condition_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        dealing_id = data.get("dealing_id")
    if not message.text:
        return await message.answer("–Ø –æ–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞",
                                    reply_markup=menu.cancel_clarify_button(dealing_id))
    dealing = Dealing(dealing_id)
    is_seller = message.from_user.id == dealing.seller_id
    dealing.update_condition(message.html_text, is_seller)
    dealing.update_status("clarify")
    user_id = dealing.seller_id if not is_seller else dealing.customer_id
    await bot.send_message(user_id,
                           f"–ï—Å—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ —Å–¥–µ–ª–∫–µ /{dealing.dealing_id}:\n\n{message.text}\n\n–ü—Ä–∏–Ω–∏–º–∞–µ—à—å –∏—Ö?",
                           reply_markup=menu.prepare_dealing(dealing.dealing_id, not dealing.check_init(user_id), True))
    await message.answer(f"–£—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ —Å–¥–µ–ª–∫–µ /{dealing.dealing_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã "
                         f"{'–ø—Ä–æ–¥–∞–≤—Ü—É' if not is_seller else '–ø–æ–∫—É–ø–∞—Ç–µ–ª—é'}")
    await state.finish()


@dp.message_handler(state=MessageDealing.message)
async def message_dealing_text(message: types.Message, state):
    async with state.proxy() as data:
        dealing_id = data.get("dealing_id")
    dealing = Dealing(dealing_id)
    await bot.send_message(dealing.seller_id if message.from_user.id == dealing.customer_id else dealing.customer_id,
                           f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {'–ø—Ä–æ–¥–∞–≤—Ü–∞' if message.from_user.id == dealing.seller_id else '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è'} "
                           f" —Å–¥–µ–ª–∫–∏ /{dealing_id}:\n\n{message.html_text}")
    await state.finish()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏")
    message.text = '/' + dealing_id
    await send_message(message)


@dp.message_handler(state=LinkDealing.link)
async def link_dealing_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        dealing_id = data.get("dealing_id")
    if not message.text.startswith("https://t.me/+") and not message.text.startswith("https://t.me/joinchat/"):
        return await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    dealing = Dealing(dealing_id)
    ans = f"–î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å–ø–æ—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ /{dealing_id} —Å–ª–µ–¥—É–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç:\n\n{message.text}"
    for x in [dealing.seller_id, dealing.customer_id, message.chat.id]:
        await bot.send_message(x, ans)
    await state.finish()


@dp.message_handler(state=Withdraw.qiwi)
async def withdraw_qiwi_text(message: types.Message, state: FSMContext):
    if not message.text.isnumeric() and not message.text[1:].isnumeric():
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=menu.withdraw(True))
    user = User(message.from_user.id)
    await bot.send_message(config.config("channel_id_main_logs"),
                           texts.withdraw_text.format(
        chat_id=message.from_user.id,
        method='–∫–∏–≤–∏',
        amount=user.balance - user.give_all_dealing_prices(),
        link=message.text
    ))
    await message.answer("–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç, –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.finish()



async def sending_check(wait_for):
    while True:
        await asyncio.sleep(wait_for)

        try:
            info = func.sending_check()

            if info != False:
                users = func.get_users_list()

                start_time = time.time()
                amount_message = 0
                amount_bad = 0

                if info[0] == 'text':
                    try:
                        m = await bot.send_message(
                            chat_id=config.config('admin_id_manager').split(':')[0],
                            text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
                            reply_markup=menu.admin_sending_info(0, 0, 0))
                        msg_id = m['message_id']
                    except:
                        pass

                    for i in range(len(users)):
                        try:
                            await bot.send_message(users[i][0], info[1], reply_markup=menu.to_close)
                            amount_message += 1
                        except Exception as e:
                            amount_bad += 1

                    try:
                        await bot.edit_message_text(chat_id=config.config('admin_id_manager').split(':')[0],
                                                    message_id=msg_id,
                                                    text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                                    reply_markup=menu.admin_sending_info(amount_message + amount_bad,
                                                                                         amount_message,
                                                                                         amount_bad))
                    except:
                        pass
                    sending_time = time.time() - start_time

                    try:
                        await bot.send_message(
                            chat_id=config.config('admin_id_manager').split(':')[0],
                            text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                                 f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                                 f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                                 f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'

                        )
                    except:
                        print('ERROR ADMIN SENDING')

                elif info[0] == 'photo':
                    try:
                        m = await bot.send_message(
                            chat_id=config.config('admin_id_manager').split(':')[0],
                            text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
                            reply_markup=None)
                        msg_id = m['message_id']
                    except:
                        pass

                    for i in range(len(users)):
                        try:
                            with open(f'photos/{info[2]}.jpg', 'rb') as photo:
                                await bot.send_photo(
                                    chat_id=users[i][0],
                                    photo=photo,
                                    caption=info[1],
                                    reply_markup=menu.to_close
                                )
                            amount_message += 1
                        except:
                            amount_bad += 1

                    try:
                        await bot.edit_message_text(chat_id=config.config('admin_id_manager').split(':')[0],
                                                    message_id=msg_id,
                                                    text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                                    reply_markup=menu.admin_sending_info(amount_message + amount_bad,
                                                                                         amount_message,
                                                                                         amount_bad))
                    except:
                        pass

                    sending_time = time.time() - start_time

                    try:
                        await bot.send_message(
                            chat_id=config.config('admin_id_manager').split(':')[0],
                            text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                                 f'üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                                 f'üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                                 f'üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'

                        )
                    except:
                        print('ERROR ADMIN SENDING')

            else:
                pass
        except Exception as e:
            print(str(e))


async def check_qiwi(wait_for):
    while True:
        try:
            data = func.get_payments_history()
            payment_code_list = func.get_list_payments_code()

            for i in range(len(data)):
                for j in payment_code_list:
                    if time.time() - float(j[2]) > 3600:
                        func.del_purchase_ticket(j[0])
                    elif data[i]['comment'] == j[1]:
                        if str(data[i]['sum']['currency']) == '643':
                            deposit = float(data[i]["sum"]["amount"])
                            func.del_purchase_ticket(j[0])

                            User(j[0]).update_balance(deposit)
                            try:
                                User(j[0]).give_ref_reward(float(deposit))
                            except:
                                print('pizdos2')

                            conn, cursor = connect()

                            try:
                                cursor.execute(
                                    f'INSERT INTO deposit_logs VALUES ("{j[0]}", "qiwi", "{deposit}", "{datetime.now()}")')
                                conn.commit()
                            except Exception as e:
                                print('e2 ')

                            try:
                                chat = User(j[0])
                                await bot.send_message(chat_id=config.config('channel_id_main_logs'),
                                                       text=texts.logs.format(
                                                           'QIWI',
                                                           chat.first_name,
                                                           f'@{chat.username}',
                                                           j[0],
                                                           datetime.now(),
                                                           f'‚ùï –ö–æ—à–µ–ª–µ–∫: +{data[i]["personId"]}\n‚ùï –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data[i]["comment"]}',
                                                           deposit
                                                       ))
                            except Exception as e:
                                print('e 3')

                            try:
                                await bot.send_message(
                                    chat_id=j[0],
                                    text=f'‚úÖ –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ +{deposit}'
                                )
                            except Exception as e:
                                pass

        except Exception as e:
            print(str(e))

        await asyncio.sleep(wait_for)


async def check_payouts(wait_for):
    while True:
        try:
            await asyncio.sleep(wait_for)

            conn, cursor = connect()

            cursor.execute(f'SELECT * FROM payouts')
            payouts = cursor.fetchall()

            if len(payouts) > 0:
                for i in payouts:
                    if i[1] == 'bad':
                        cursor.execute(f'DELETE FROM payouts WHERE user_id = "{i[0]}"')
                        conn.commit()

                        await bot.send_message(chat_id=i[0], text=f'‚úÖ –í–∞—à —á–µ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 0 ‚ÇΩ',
                                               reply_markup=menu.to_close)
                    else:
                        cursor.execute(f'DELETE FROM payouts WHERE user_id = "{i[0]}"')
                        conn.commit()

                        User(i[0]).update_balance(i[1])
                        try:
                            User(i[0]).give_ref_reward(float(i[1]))
                        except:
                            pass
                        await bot.send_message(chat_id=i[0],
                                               text=f'‚úÖ –í–∞—à —á–µ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{i[1]} ‚ÇΩ',
                                               reply_markup=menu.to_close)

                        try:
                            await bot.send_message(chat_id=config.config('channel_id_main_logs'),
                                                   text=texts.logs.format(
                                                       'BANKER',
                                                       User(i[0]).first_name,
                                                       User(i[0]).username,
                                                       i[0],
                                                       datetime.now(),
                                                       f'‚ùï –ß–µ–∫: {i[2]}',
                                                       i[1]
                                                   ))
                        except:
                            pass
        except:
            pass


if __name__ == '__main__':

    loop = asyncio.get_event_loop()

    loop.create_task(sending_check(10))
    loop.create_task(check_payouts(5))

    executor.start_polling(dp, skip_updates=True)
